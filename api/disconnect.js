const Node = require('../models/Node');
const logger = require('../utils/logger');

module.exports = async (req, res) => {
    try {
        const { walletAddress } = req.body;

        if (!walletAddress) {
            return res.status(400).json({ success: false, error: "Adresse wallet manquante pour la d√©connexion" });
        }

        // Trouver et mettre √† jour le n≈ìud dans la base de donn√©es
        const node = await Node.findOne({ walletAddress });
        
        if (!node) {
            return res.status(404).json({ 
                success: false, 
                error: "N≈ìud non trouv√©" 
            });
        }
        
        // S'assurer que les objets stats et rewards existent
        if (!node.stats) {
            node.stats = {
                bandwidthShared: 0,
                connectionUptime: 0,
                connectionQuality: 100,
                startTime: new Date()
            };
        }
        
        if (!node.rewards) {
            node.rewards = {
                dailyReward: 0,
                totalEarned: 0,
                rewardTier: 'STARTER',
                lastRewardCalculation: new Date()
            };
        }
        
        // Calculer le temps d'activit√©
        const startTime = node.stats.startTime || new Date();
        const endTime = new Date();
        const uptimeSeconds = Math.floor((endTime - startTime) / 1000);
        
        // Mettre √† jour les statistiques du n≈ìud
        node.status = 'INACTIVE';
        node.active = false; // S'assurer que le champ active est explicitement mis √† false
        node.stats.connectionUptime += uptimeSeconds;
        node.lastDisconnected = new Date(); // Ajouter un timestamp de d√©connexion
        
        // R√©initialiser les informations de connexion
        node.connectedUsers = 0;
        node.performance = {
            bandwidth: 0,
            latency: 0,
            packetLoss: 0
        };
        
        // Mettre √† jour les r√©compenses si c'est un n≈ìud h√¥te
        let bandwidthReward = 0;
        if (node.nodeType === 'HOST') {
            // Calculer les r√©compenses bas√©es sur le temps d'activit√© et la bande passante
            const bandwidth = node.performance?.bandwidth || 0;
            bandwidthReward = bandwidth * 0.01 * (uptimeSeconds / 3600); // R√©compense par heure
            node.rewards.dailyReward += bandwidthReward;
            node.rewards.totalEarned += bandwidthReward;
            node.rewards.lastRewardCalculation = new Date();
            
            // Sauvegarder le n≈ìud h√©bergeur
            await node.save();
        } else {
            // Si c'est un n≈ìud utilisateur, le supprimer compl√®tement
            await Node.deleteOne({ walletAddress });
            logger.info(`üóëÔ∏è N≈ìud utilisateur supprim√©: ${walletAddress}`);
        }
        
        logger.info(`‚úÖ D√©connexion du n≈ìud VPN`);
        logger.info(`üë§ Adresse Wallet: ${walletAddress}`);
        logger.info(`‚è±Ô∏è Temps d'activit√©: ${uptimeSeconds} secondes`);
        
        if (node.nodeType === 'HOST') {
            logger.info(`üí∞ R√©compenses ajout√©es: ${bandwidthReward.toFixed(4)}`);
        }

        res.json({ 
            success: true, 
            message: "N≈ìud d√©connect√© avec succ√®s",
            uptime: uptimeSeconds,
            rewards: node.nodeType === 'HOST' ? {
                daily: node.rewards.dailyReward,
                total: node.rewards.totalEarned
            } : null
        });
    } catch (error) {
        logger.error('Erreur lors de la d√©connexion du n≈ìud:', error);
        res.status(500).json({ 
            success: false, 
            error: "Erreur lors de la d√©connexion du n≈ìud" 
        });
    }
};