const Node = require('../models/Node');
const logger = require('../utils/logger');

module.exports = async (req, res) => {
    try {
        const { walletAddress, nodeInfo, isHost } = req.body;

        if (!walletAddress || !nodeInfo) {
            return res.status(400).json({ success: false, error: "Informations du n≈ìud manquantes" });
        }

        // D√©terminer l'IP publique (dans un environnement r√©el, vous utiliseriez req.ip ou un service externe)
        logger.info('Headers de requ√™te IP:', {
            'x-forwarded-for': req.headers['x-forwarded-for'],
            'x-real-ip': req.headers['x-real-ip'],
            'remoteAddress': req.socket.remoteAddress,
            'req.ip': req.ip
        });
        
        let publicIP = req.headers['x-forwarded-for'] || 
                       req.headers['x-real-ip'] || 
                       req.ip || 
                       req.socket.remoteAddress || 
                       "0.0.0.0";
        
        // En d√©veloppement, si l'IP est localhost (::1 ou 127.0.0.1), utiliser une IP externe simul√©e
        if (publicIP === '::1' || publicIP === '127.0.0.1' || publicIP.includes('::ffff:127.0.0.1')) {
            // G√©n√©rer une adresse IP al√©atoire qui ressemble √† une vraie adresse externe
            const octet1 = Math.floor(Math.random() * 223) + 1; // √âviter les adresses r√©serv√©es
            const octet2 = Math.floor(Math.random() * 255);
            const octet3 = Math.floor(Math.random() * 255);
            const octet4 = Math.floor(Math.random() * 254) + 1;
            publicIP = `${octet1}.${octet2}.${octet3}.${octet4}`;
        }
        
        // D√©terminer la bande passante (dans un environnement r√©el, cela serait bas√© sur des tests)
        const bandwidth = Math.floor(Math.random() * 100) + 10; // Simulation pour le moment
        
        // G√©n√©rer un ID de connexion unique
        const connectionId = Math.random().toString(36).substr(2, 9);

        // Cr√©er ou mettre √† jour le n≈ìud dans la base de donn√©es
        let node = await Node.findOne({ walletAddress });
        
        if (node) {
            // Mettre √† jour le n≈ìud existant
            node.status = 'ACTIVE';
            node.active = true; // S'assurer que le n≈ìud est marqu√© comme actif
            node.nodeType = isHost ? 'HOST' : 'USER';
            node.performance.bandwidth = bandwidth;
            node.stats.startTime = new Date();
            node.lastSeen = new Date(); // Mettre √† jour le timestamp de derni√®re activit√©
            
            // Sauvegarder l'IP dans le mod√®le
            node.ip = publicIP;
            
            // Mettre √† jour les informations suppl√©mentaires si fournies
            if (nodeInfo.country) node.location.country = nodeInfo.country;
            if (nodeInfo.region) node.location.region = nodeInfo.region;
            if (nodeInfo.coordinates) node.location.coordinates = nodeInfo.coordinates;
            
            await node.save();
            logger.info(`N≈ìud existant activ√©: ${walletAddress}`);
        } else {
            // Cr√©er un nouveau n≈ìud
            node = new Node({
                walletAddress,
                nodeType: isHost ? 'HOST' : 'USER',
                status: 'ACTIVE',
                active: true,
                ip: publicIP,
                performance: {
                    bandwidth: bandwidth,
                    latency: 0,
                    uptime: 0
                },
                location: {
                    country: nodeInfo.country || 'Unknown',
                    region: nodeInfo.region || 'Unknown',
                    coordinates: nodeInfo.coordinates || { lat: 0, lng: 0 }
                }
            });
            
            await node.save();
            logger.info(`Nouveau n≈ìud cr√©√©: ${walletAddress}`);
        }

        logger.info(`‚úÖ Nouvel enregistrement de n≈ìud VPN`);
        logger.info(`üë§ Adresse Wallet: ${walletAddress}`);
        logger.info(`üì° Mode: ${isHost ? "H√©bergeur" : "Utilisateur"}`);
        logger.info(`‚ÑπÔ∏è Infos du N≈ìud: ${JSON.stringify(nodeInfo)}`);
        logger.info(`üì° IP: ${publicIP}, üöÄ Bandwidth: ${bandwidth} MB`);

        res.json({ 
            success: true, 
            message: "N≈ìud enregistr√© avec succ√®s", 
            connectionId, 
            ip: publicIP, 
            bandwidth,
            nodeId: node._id
        });
    } catch (error) {
        logger.error('Erreur lors de la connexion du n≈ìud:', error);
        res.status(500).json({ 
            success: false, 
            error: "Erreur lors de l'enregistrement du n≈ìud" 
        });
    }
};